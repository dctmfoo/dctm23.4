apiVersion: apps/v1
kind: Deployment
metadata:
  name: otawg-deployment
  labels:
    {{ include "appworks-gateway.labels" . | nindent 4 }}
    {{- range $key, $value := .Values.customPodLabels }}
    {{ $key }}: {{ $value }}
    {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "appworks-gateway.name" . }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "appworks-gateway.name" . }}
        {{- range $key, $value := .Values.customPodLabels }}
        {{ $key }}: {{ $value }}
        {{- end }}
    spec:
      {{- if default .Values.serviceAccount.createserviceaccount }}
      serviceAccountName: {{ .Values.serviceAccount.serviceAccountName }}
      {{- end }}
      {{- if default .Values.global.imagePullSecrets .Values.image.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ default .Values.global.imageSource .Values.image.registry }}/{{ .Values.image.repository }}:{{ default .Values.global.imageTag .Values.image.tag }}"
          imagePullPolicy: {{ default .Values.global.imagePullPolicy .Values.image.pullPolicy }}
          envFrom:
            - configMapRef:
                name: {{ .Chart.Name }}-config-map
            - secretRef:
                name: {{ .Values.secretName }}-secret
          securityContext:
            allowPrivilegeEscalation: false
          env:
            - name: AWG_FIPS_MODE_ENABLED
              value: {{ .Values.fipsModeEnabled | quote }}
          volumeMounts:
          {{- if .Values.proxy.automate }}
            - mountPath: /usr/local/tomcat/conf/proxy
              name: awg-proxy-config-map-volume
          {{- end }}
            - mountPath: /usr/local/tomcat/conf/trustCertificates
              name: awg-trust-certs
          readinessProbe:
            httpGet:
              path: /v3/admin/status/ready
              port: 8080
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          livenessProbe:
            httpGet:
              path: /v3/admin/status/live
              port: 8080
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
      initContainers:
        {{- if hasKey .Values.image "pgInitContainer" }}
        - name: awg-pg-init-container
          image: "{{ default .Values.global.imageSource .Values.image.pgInitContainer.registry }}/{{ .Values.image.pgInitContainer.repository }}:{{ default .Values.global.imageTag .Values.image.pgInitContainer.tag }}"
          imagePullPolicy: {{ default .Values.global.imagePullPolicy .Values.image.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
          envFrom:
            - configMapRef:
                name: awg-pg-init-container-config-map
          volumeMounts:
            - mountPath: /etc/secrets
              name: awg-pg-init-container-secret-volume
            - mountPath: /etc/config
              name: awg-pg-init-container-config-map-volume
        {{- end }}
        {{- if hasKey .Values.image "appsInitContainer" }}
        - name: awg-apps-init-container
          image: "{{ default .Values.global.imageSource .Values.image.appsInitContainer.registry }}/{{ .Values.image.appsInitContainer.repository }}:{{ default .Values.global.imageTag .Values.image.appsInitContainer.tag }}"
          imagePullPolicy: {{ default .Values.global.imagePullPolicy .Values.image.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
          volumeMounts:
            - mountPath: /conf/install
              name: apps-volume
        {{- end }}
        - name: awg-init-container
          image: "{{ default .Values.global.imageSource .Values.image.awgInitContainer.registry }}/{{ .Values.image.awgInitContainer.repository }}:{{ default .Values.global.imageTag .Values.image.awgInitContainer.tag }}"
          imagePullPolicy: {{ default .Values.global.imagePullPolicy .Values.image.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
          envFrom:
            - configMapRef:
                name: awg-init-container-config-map
            - secretRef:
                name: awg-init-container-secret
          env:
            - name: AWG_FIPS_MODE_ENABLED
              value: {{ .Values.fipsModeEnabled | quote }}
          volumeMounts:
            {{- if hasKey .Values.image "appsInitContainer" }}
            - mountPath: /usr/local/tomcat/conf/install
              name: apps-volume
            {{- end }}
            - mountPath: /usr/local/tomcat/conf/trustCertificates
              name: awg-trust-certs
      volumes:
        {{- if hasKey .Values.image "appsInitContainer" }}
        - name: apps-volume
          emptyDir: {}
        {{- end }}
        - name: awg-pg-init-container-secret-volume
          secret:
            secretName: awg-pg-init-container-secret
        - name: awg-pg-init-container-config-map-volume
          configMap:
            name: awg-pg-init-container-config-map
        - name: appworks-gateway-secret-volume
          secret:
            secretName: appworks-gateway-secret
        {{- if .Values.proxy.automate }}
        - name: awg-proxy-config-map-volume
          configMap:
            name: awg-proxy-config-map
        {{- end }}
        - name: awg-trust-certs
          secret:
            secretName: awg-trust-certs

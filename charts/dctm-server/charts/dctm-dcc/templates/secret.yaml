{{- if hasKey .Values.ingress "tls" }}
{{- if and (eq .Values.ingress.enableDCCIngress true) (eq .Values.ingress.tls.enabled true) }}
#This secret is for ssl tls
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.ingress.tls.secretName }}
  namespace: {{ .Values.namespace }}
type: kubernetes.io/tls
data:
  tls.crt: {{ .Values.ingress.tls.tlscrt }}
  tls.key: {{ .Values.ingress.tls.tlskey }}
{{- end }}
{{- end }}
---
{{- if and (eq .Values.metadata.enabled true) (eq .Values.metadata.newrelic.enabled true) }}
#This secret is for metadata newrelic configuration
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.prefix }}-{{ .Values.metadata.prefix }}-secret
  namespace: {{ .Values.namespace }}
type: Opaque
stringData:
{{- if eq .Values.newrelic.proxy_enable true }}
  newrelic.yml: |
    common: &default_settings
      license_key: {{ default "" .Values.newrelic.license_key | quote }}
      app_name: {{ default "" .Values.metadata.newrelic.app_name | quote }}
      log_level: info
      proxy_host: {{ default "" .Values.newrelic.proxy_host | quote }}
      proxy_port: {{ .Values.newrelic.proxy_port }}
{{ else }}
  newrelic.yml: |
    common: &default_settings
      license_key: {{ default "" .Values.newrelic.license_key | quote }}
      app_name: {{ default "" .Values.metadata.newrelic.app_name | quote }}
      log_level: info
{{- end }}
{{- end }}
---
{{- if and (eq .Values.syncagent.enabled true) (eq .Values.syncagent.newrelic.enabled true) }}
#This secret is for syncagent newrelic configuration
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.prefix }}-{{ .Values.syncagent.prefix }}-secret
  namespace: {{ .Values.namespace }}
type: Opaque
stringData:
{{- if eq .Values.newrelic.proxy_enable true }}
  newrelic.yml: |
    common: &default_settings
      license_key: {{ default "" .Values.newrelic.license_key | quote }}
      app_name: {{ default "" .Values.syncagent.newrelic.app_name | quote }}
      log_level: info
      proxy_host: {{ default "" .Values.newrelic.proxy_host | quote }}
      proxy_port: {{ .Values.newrelic.proxy_port }}
{{ else }}
  newrelic.yml: |
    common: &default_settings
      license_key: {{ default "" .Values.newrelic.license_key | quote }}
      app_name: {{ default "" .Values.syncagent.newrelic.app_name | quote }}
      log_level: info
{{- end }}
{{- end }}
---
{{- if and (eq .Values.syncnshareManual.enabled true) (eq .Values.syncnshareManual.newrelic.enabled true) }}
#This secret is for syncnshareManual newrelic configuration
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.prefix }}-{{ .Values.syncnshareManual.prefix }}-secret
  namespace: {{ .Values.namespace }}
type: Opaque
stringData:
{{- if eq .Values.newrelic.proxy_enable true }}
  newrelic.yml: |
    common: &default_settings
      license_key: {{ default "" .Values.newrelic.license_key | quote }}
      app_name: {{ default "" .Values.syncnshareManual.newrelic.app_name | quote }}
      log_level: info
      proxy_host: {{ default "" .Values.newrelic.proxy_host | quote }}
      proxy_port: {{ .Values.newrelic.proxy_port }}
{{ else }}
  newrelic.yml: |
    common: &default_settings
      license_key: {{ default "" .Values.newrelic.license_key | quote }}
      app_name: {{ default "" .Values.syncnshareManual.newrelic.app_name | quote }}
      log_level: info
{{- end }}
{{- end }}
---
{{- if and (eq .Values.coreNotification.enabled true) (eq .Values.coreNotification.newrelic.enabled true) }}
#This secret is for coreNotification newrelic configuration
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.prefix }}-{{ .Values.coreNotification.prefix }}-secret
  namespace: {{ .Values.namespace }}
type: Opaque
stringData:
{{- if eq .Values.newrelic.proxy_enable true }}
  newrelic.yml: |
    common: &default_settings
      license_key: {{ default "" .Values.newrelic.license_key | quote }}
      app_name: {{ default "" .Values.coreNotification.newrelic.app_name | quote }}
      log_level: info
      proxy_host: {{ default "" .Values.newrelic.proxy_host | quote }}
      proxy_port: {{ .Values.newrelic.proxy_port }}
{{ else }}
  newrelic.yml: |
    common: &default_settings
      license_key: {{ default "" .Values.newrelic.license_key | quote }}
      app_name: {{ default "" .Values.coreNotification.newrelic.app_name | quote }}
      log_level: info
{{- end }}
{{- end }}
---
{{- if and (eq .Values.mailService.enabled true) (eq .Values.mailService.newrelic.enabled true) }}
#This secret is for mailService newrelic configuration
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.prefix }}-{{ .Values.mailService.prefix }}-secret
  namespace: {{ .Values.namespace }}
type: Opaque
stringData:
{{- if eq .Values.newrelic.proxy_enable true }}
  newrelic.yml: |
    common: &default_settings
      license_key: {{ default "" .Values.newrelic.license_key | quote }}
      app_name: {{ default "" .Values.mailService.newrelic.app_name | quote }}
      log_level: info
      proxy_host: {{ default "" .Values.newrelic.proxy_host | quote }}
      proxy_port: {{ .Values.newrelic.proxy_port }}
{{ else }}
  newrelic.yml: |
    common: &default_settings
      license_key: {{ default "" .Values.newrelic.license_key | quote }}
      app_name: {{ default "" .Values.mailService.newrelic.app_name | quote }}
      log_level: info
{{- end }}
{{- end }}
---

{{- if or (eq .Values.metadata.dbSchemaInit.enabled true) (eq .Values.syncagent.dbSchemaInit.enabled true) (eq .Values.syncnshareManual.dbSchemaInit.enabled true) (eq .Values.coreNotification.dbSchemaInit.enabled true)}}
apiVersion: v1
kind: Secret
metadata:
  name: db-secret
type: Opaque
data:
   db-pass: {{ default "" .Values.database.dbunencryptedpassword | b64enc | quote }}
{{- end }}
---

{{- if eq .Values.dardeploy.enabled true }}
apiVersion: v1
kind: Secret
metadata:
  name: dar-secret
type: Opaque
data:
   install_owner_password: {{ default "" .Values.dardeploy.install_owner_password | b64enc | quote }}
{{- end }}
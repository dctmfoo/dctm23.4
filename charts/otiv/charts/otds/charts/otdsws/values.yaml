########################################################################
# Settings for OpenText Directory Services (OTDS)
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
########################################################################

## enabled controls if OTDS gets deployed as a container in
## Kubernetes. If you have OTDS deployed somewhere else you can set
## it to false.
enabled: true
## ingress enables Kubernetes Ingress for OTDS
ingress: 
  enabled: false
  secret: 
  ## prependPath can be used to prepend a value to the standard OTDS server
  ## path when multiple services share a hostname.  Adding a value of "otds"
  ## would result in the login URL being <publicHostname>/otds/otdsws/login.
  prependPath:
## serviceType can be used to override the spec type for the otdsws
## service.  If not set this value is defined based on the value
## of ingress.enabled.  The type is set to ClusterIP if ingress
## is enabled and LoadBalancer if it is disabled.
serviceType: ClusterIP
serviceAlbType: NodePort

service:
  # adds listed annotations to all otiv services
  # each entry needs to be a single string that contains a colon ( : ) that separates
  #   the property name and value
  annotations: []
## carrierGradeNAT can be set to true to configure Tomcat to treat
## 100.64.0.0/10 addresses as internal for compatibility with environments
## that use Carrier-grade NAT.
carrierGradeNAT: false
## replicas for OTDS should always be 1:
replicas: 1
## port defines the external port for the OTDS Kubernetes service:
port: 80
## targetPort defines the internal container port for the
## OTDS Kubernetes service:
targetPort: 8080
## protocol: communication protocol - used in config map
protocol: http
## portProtocol is the protocol the OTDS Kubernetes service is using:
portProtocol: TCP
## publicHostname defines the FQDN or IP address of the
## Kubernetes Services of OTDS. If empty ("") the hostname
## will dynamically be determined via the Kubernetes API.
publicHostname:
## cryptKey is used for secure synchronized access to OpenDJ from 
## frontend instances
## The value is a 16 character ASCII string that has been base64 encoded
cryptKey:
## additionalJavaOpts defines additional Java parameters for OTDS 
additionalJavaOpts:
## enable the use of the config.yml file in the otdsws chart directory
## to apply a specific set of configuration options on the initial run
## when the DB is populated.
## A sample config.yml file is in the otdsws chart directory
enableBootstrapConfig: false
## jvmMemory sets the maximum amount of memory used by the otds-server JVM
## If this value is not set, the JVM memory will be set to 75% of
## resources.limits.memory if available otherwise 512MB
## Memory amounts in M, Mi, G or Gi are supported
jvmMemory:
## migration.* defines if migration from OpenDJ should be attempted and
## defines how the migration should take place.
## There are three different ways migration can take place.
## 1. From a legacy OTDS deployment (eg. otds:21.3.0 images), which requires
##    usingLegacyImage=true and that legacyImagePVC is specified.
##    For this option the minimum memory requirements are increased
##    resource.requests.memory=2Gi and resource.limits.memory=3Gi
## 2. From an existing OTDS deployment in the same cluster, which requires
##    the existing opendj servicename and password be specified.
## 3. From an external OpenDJ such as a VM deployment, which requires
##    the opendjUri (eg. ldap://otds.domain.local:1389) and password
##    be specified.
## Note that if usingLegacyImage=true other non-relevant values will
## be ignored and if opendjUri is specified servicename will be ignored.
## If enabled=true the default values will migrate from the previous
## default configuration.
migration:
   enabled: false
   usingLegacyImage: false
   legacyImagePVC:
   serviceName: opendj
   servicePort: 1389
   opendjUri:
   # UPDATE REQUIRED
   password: 
## otdsdb.* defines the connection information for the DB which is the
## backend data storage location for OTDS
otdsdb:
  ## url specified the url used to connect to the DB for OTDS
  ## The following is a list of sample values.
  ## jdbc:postgresql://postgres.domain.local:5432/otdsdb
  ## jdbc:sqlserver://ms-sql.domain.local:1433;databaseName=otdsdb
  ## jdbc:oracle:thin:@oracle.domain.local:1521:otdsdb
  ## jdbc:sap://hana.domain.local:30015/?databaseName=otdsdb
  ## if blank, a postresql url is constructed
  url: 
  ## database name
  name: otdsdb
  ## username specifies the account for the DB connection
  username: otds
  ## password specifies the password for the DB account
   # UPDATE REQUIRED
  password: 

  initialize: true
## image.* defines Docker image location, tags and pull parameters for
## OTDS - you need to adjust this:
image:
  name: otds-server
  tag: 22.2.3
  pullPolicy: Always
  pullSecret:
## resource.* define the resource requirements for OTDS:
resources:
  enabled: true
  requests:
    cpu: 0.5
    memory: 1.5Gi
  limits:
    cpu: 2
    memory: 1.5Gi
## newrelic.* define NewRelic settings for OTDS
## if customer has NewRelic license and would like to enable NewRelic APM, can configure below settings
newrelic:
  NEW_RELIC_LICENSE_KEY:
  NEW_RELIC_APP_NAME:
  NEW_RELIC_LOG_FILE_NAME: STDOUT
  NEW_RELIC_LOG_LEVEL: info
  JAVA_OPTS: -javaagent:/opt/newrelic/newrelic.jar

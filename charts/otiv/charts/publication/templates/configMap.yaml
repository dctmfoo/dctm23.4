apiVersion: v1
kind: ConfigMap
metadata:
    name: {{ include "base.resource.name" . }}-configmap
data:
    ACCESS_MODEL: headCheckSource
    ACCESS_CHECK_TIMEOUT_SECONDS: '{{ .Values.accessCheckTimeoutSeconds }}'
    AJIRA_PORT: {{ include "amqp.port" . }}
    AJIRA_USE_SSL: '{{ .Values.global.amqp.ssl }}'
{{- if .Values.global.amqp.ssl }}
    AJIRA_KEYSTORE_PATH: /opt/jre/lib/security/cacerts
    AJIRA_TRUSTSTORE_PATH: /opt/jre/lib/security/cacerts
{{- end }}
{{- if (include "is.ocp" .) }}
    AUTH_CLIENT_ID_PUBLISHER: blazon-publisher
    NOTIFY_RMQ: 'true'
    NOTIFY_RMQ_PORT: {{ include "amqp.port" . }}
    NOTIFY_RMQ_SSL: '{{ .Values.global.amqp.ssl }}'
    NOTIFY_RMQ_KEYSTORE_PATH: /opt/jre/lib/security/cacerts
    NOTIFY_RMQ_TRUSTSTORE_PATH: /opt/jre/lib/security/cacerts
{{- else }}
    AJIRA_HOST: {{ .Values.global.amqp.host }}
    AJIRA_USER: {{ .Values.global.amqp.user }}
    AJIRA_VHOST: {{ .Values.global.amqp.vhost }}
{{- end }}
    API_DOC_ROOT_URL: 'https://developer.opentext.com/apis/69f18c6b-0b58-4509-8117-6bf022fd2e44/aa064dbd-8954-4d0f-8892-65fe2de124bb/12bc3ec7-22df-42d4-8f27-d5c4ccb9dd0e'
    AUTHORITY: {{ $.Values.global.publicWebProtocol }}://{{ include "ingress.fqdn" . }}
{{- if .Values.etsCertificateUrl }}
    ETS_CERTIFICATE_URL: {{ .Values.etsCertificateUrl }}
    IDENTITY_HEADERS_LIST: '["authorization", "etstoken"]'
{{- end }}
{{- if .Values.rasOrigin }}
    RAS_ORIGIN: {{ .Values.rasOrigin }}
{{- end }}
    CLUSTER_DISCOVERY: kubernetes
    {{ template "cors.config" . }}
    {{ template "forwarded.config" . }}
    CORS_ADDITIONAL_HEADERS_LIST: '{{ .Values.global.customHttpHeaders }}'
    COUNTER: '{{ .Values.global.counter }}'
    ENABLE_ACCESS_CACHE: '{{ .Values.enableAccessCache }}'
    ENABLE_FORWARDING: '{{ .Values.global.enableForwarding }}'
{{- if not .Values.global.enableForwarding }}
    STICKY_FORWARDING_PROTOCOL: {{ $.Values.global.publicWebProtocol }}
{{- end }}
    ENABLE_OAUTH: 'true'
    LOG_OUT: {{ default .Values.global.logOutput .Values.logOutput }}
{{- if .Values.loglevel.expiry }}
    LOG_LEVEL_EXPIRY: {{ .Values.loglevel.expiry }}
{{- end }}
{{- if .Values.loglevel.access }}
    LOG_LEVEL_ACCESS: {{ .Values.loglevel.access }}
{{- end }}
{{- if .Values.loglevel.hazelCast }}
    LOG_LEVEL_HAZELCAST: {{ .Values.loglevel.hazelCast }}
{{- end }}
{{- if .Values.loglevel.migrator }}
    LOG_LEVEL_MIGRATOR: {{ .Values.loglevel.migrator }}
{{- end }}
{{- if .Values.loglevel.netty }}
    LOG_LEVEL_NETTY: {{ .Values.loglevel.netty }}
{{- end }}
{{- if .Values.loglevel.service }}
    LOG_LEVEL_SERVICE: {{ .Values.loglevel.service }}
{{- end }}
{{- if .Values.loglevel.spi }}
    LOG_LEVEL_SPI: {{ .Values.loglevel.spi }}
{{- end }}
{{- if .Values.loglevel.spiAjira }}
    LOG_LEVEL_SPI_AJIRA: {{ .Values.loglevel.spiAjira }}
{{- end }}
{{- if .Values.loglevel.spiMkondo }}
    LOG_LEVEL_SPI_MKONDO: {{ .Values.loglevel.spiMkondo }}
{{- end }}
{{- if .Values.loglevel.spiSoteria }}
    LOG_LEVEL_SPI_SOTERIA: {{ .Values.loglevel.spiSoteria }}
{{- end }}
{{- if .Values.loglevel.spiPithos }}
    LOG_LEVEL_SPI_PITHOS: {{ .Values.loglevel.spiPithos }}
{{- end }}
{{- if .Values.loglevel.system }}
    LOG_LEVEL_SYSTEM: {{ .Values.loglevel.system }}
{{- end }}
{{- if .Values.loglevel.util }}
    LOG_LEVEL_UTIL: {{ .Values.loglevel.util }}
{{- end }}
{{- if .Values.loglevel.vertx }}
    LOG_LEVEL_VERTX: {{ .Values.loglevel.vertx }}
{{- end }}
{{- if .Values.loglevel.vertxHost }}
    LOG_LEVEL_VERTX_HOST: {{ .Values.loglevel.vertxHost }}
{{- end }}
    DISCOVERY_REGISTER_POLICY: name
    DISCOVERY_REGISTER_POLICY_NAME: {{ include "base.resource.name" . }}
{{- if (include "is.iv" .) }}
    MKONDO_BLOB_BASE_URL: {{ $.Values.global.publicWebProtocol }}://otiv-asset{{ include "ingress.suffix" .}}/artifacts
    MKONDO_BLOB_ROOTS: /var/mkondo/fs-0
    MKONDO_STORAGE_DISABLED: 'false'
{{- end }}
    KUB_NAMESPACE: {{ .Release.Namespace }}
    {{- template "new.relic.transform.config" . }}
    OTDS_ORIGIN: {{ template "otds.api.url" .}}
    PEER_REST_PORT: '{{ .Values.service.port }}'
    PORT: '{{ .Values.service.targetPort }}'
    PITHOS_PROVIDER: {{ .Values.global.database.type }}
    PITHOS_HOST: {{ .Values.global.database.hostname }}
    PITHOS_PORT: '{{ .Values.global.database.port }}'
    PITHOS_DB: {{ eq .Values.global.database.type "postgresql" | ternary .Values.global.database.ivName .Values.global.database.adminDatabase }}
{{- if eq .Values.global.database.type "postgresql" }}
    PITHOS_PSQL_DB: {{ .Values.global.database.adminDatabase }}
{{- end }}
{{- if (include "is.iv" .) }}
    PITHOS_USER: {{ .Values.global.database.adminUsername }}
{{- end }}
    PITHOS_USE_SSL: '{{ .Values.global.database.ssl }}'
    PITHOS_SSL_MODE: '{{ .Values.global.database.sslMode }}'
    {{- template "proxy.url.params" . }}
    SOTERIA_PROVIDER: otds
    {{- template "timezone" . }}
    {{ template "trusted.source.origins" . }}
    VERTX_CLUSTER_NETWORK_PORT: '{{ .Values.global.hazelport }}'
    __VERSION__: '{{ template "version.stamp" . }}'
